Introduction
============

The objective of Openbus is to define an architecture able to process the massive amount of events that occur in a banking IT Infraestructure.
Those events are of different types, from a variety of sources and with different formats.

Depending on the nature of events, we will be processing them in a batch-oriented or near-realtime fashion.

To achieve this flexibility and big capability, we have defined Openbus as a concrete implementation of the so called Lambda Architecture for Big Data systems [Marz]_.

Lambda Architecture defines three main layers for the processing of data streams: Batch layer, Speed layer and Serving layer.

.. image:: /images/lambda.001.png

In our case, Openbus is comprised of a set of technologies that interact between them to implement these layers:

  - **Apache Kafka**: this is our data stream. Different systems will be generating messages in Kafka topics.
  - **HDFS**: this is where our "master dataset" is stored.
  - **MapReduce**: This is how our batch layer recomputes batch views. Mapreduce is also used for a batch ETL process that dumps data from Kafka to HDFS.
  - **Apache Storm**: This is what we use as our speed layer. Events are consumed from Kafka and processed into "realtime views"
  - **HBase**: This is where we store the "realtime views" generated by Storm topologies


.. [Marz] Nathan Marz, James Warren. "Big Data. Principles and best practices of scalable realtime data systems" Manning MEAP


Use Cases
---------

Some use cases where openbus could be applied are:

  - Web analytics
  - Social Network Analysis
  - Security Information and Event Management




