// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.produban.openbus.console.domain;

import com.produban.openbus.console.domain.MetricaBatch;
import com.produban.openbus.console.domain.MetricaBatchDataOnDemand;
import com.produban.openbus.console.repository.MetricaBatchRepository;
import com.produban.openbus.console.service.MetricaBatchService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MetricaBatchDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MetricaBatchDataOnDemand: @Component;
    
    private Random MetricaBatchDataOnDemand.rnd = new SecureRandom();
    
    private List<MetricaBatch> MetricaBatchDataOnDemand.data;
    
    @Autowired
    MetricaBatchService MetricaBatchDataOnDemand.metricaBatchService;
    
    @Autowired
    MetricaBatchRepository MetricaBatchDataOnDemand.metricaBatchRepository;
    
    public MetricaBatch MetricaBatchDataOnDemand.getNewTransientMetricaBatch(int index) {
        MetricaBatch obj = new MetricaBatch();
        setBatchMetricDesc(obj, index);
        setBatchMetricName(obj, index);
        setCreateCode(obj, index);
        setError(obj, index);
        setEsCamposId(obj, index);
        setEsIndex(obj, index);
        setEsTimestamp(obj, index);
        setEsType(obj, index);
        setEstado(obj, index);
        setFechaCreacion(obj, index);
        setFechaUltModif(obj, index);
        setFromQuery(obj, index);
        setIsBatch(obj, index);
        setIsCreated(obj, index);
        setIsUpdated(obj, index);
        setPlanificacion(obj, index);
        setQueryCode(obj, index);
        setSelectQuery(obj, index);
        setSourceId(obj, index);
        setTypeQuery(obj, index);
        setUsuarioCreacion(obj, index);
        setUsuarioModificacion(obj, index);
        setWhereQuery(obj, index);
        return obj;
    }
    
    public void MetricaBatchDataOnDemand.setBatchMetricDesc(MetricaBatch obj, int index) {
        String batchMetricDesc = "batchMetricDesc_" + index;
        obj.setBatchMetricDesc(batchMetricDesc);
    }
    
    public void MetricaBatchDataOnDemand.setBatchMetricName(MetricaBatch obj, int index) {
        String batchMetricName = "batchMetricName_" + index;
        obj.setBatchMetricName(batchMetricName);
    }
    
    public void MetricaBatchDataOnDemand.setCreateCode(MetricaBatch obj, int index) {
        String createCode = "createCode_" + index;
        obj.setCreateCode(createCode);
    }
    
    public void MetricaBatchDataOnDemand.setError(MetricaBatch obj, int index) {
        String error = "error_" + index;
        obj.setError(error);
    }
    
    public void MetricaBatchDataOnDemand.setEsCamposId(MetricaBatch obj, int index) {
        String esCamposId = "esCamposId_" + index;
        obj.setEsCamposId(esCamposId);
    }
    
    public void MetricaBatchDataOnDemand.setEsIndex(MetricaBatch obj, int index) {
        String esIndex = "esIndex_" + index;
        obj.setEsIndex(esIndex);
    }
    
    public void MetricaBatchDataOnDemand.setEsTimestamp(MetricaBatch obj, int index) {
        String esTimestamp = "esTimestamp_" + index;
        obj.setEsTimestamp(esTimestamp);
    }
    
    public void MetricaBatchDataOnDemand.setEsType(MetricaBatch obj, int index) {
        String esType = "esType_" + index;
        obj.setEsType(esType);
    }
    
    public void MetricaBatchDataOnDemand.setEstado(MetricaBatch obj, int index) {
        String estado = "estado_" + index;
        obj.setEstado(estado);
    }
    
    public void MetricaBatchDataOnDemand.setFechaCreacion(MetricaBatch obj, int index) {
        Date fechaCreacion = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFechaCreacion(fechaCreacion);
    }
    
    public void MetricaBatchDataOnDemand.setFechaUltModif(MetricaBatch obj, int index) {
        Date fechaUltModif = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFechaUltModif(fechaUltModif);
    }
    
    public void MetricaBatchDataOnDemand.setFromQuery(MetricaBatch obj, int index) {
        String FromQuery = "FromQuery_" + index;
        obj.setFromQuery(FromQuery);
    }
    
    public void MetricaBatchDataOnDemand.setIsBatch(MetricaBatch obj, int index) {
        Boolean isBatch = Boolean.TRUE;
        obj.setIsBatch(isBatch);
    }
    
    public void MetricaBatchDataOnDemand.setIsCreated(MetricaBatch obj, int index) {
        Boolean isCreated = Boolean.TRUE;
        obj.setIsCreated(isCreated);
    }
    
    public void MetricaBatchDataOnDemand.setIsUpdated(MetricaBatch obj, int index) {
        Boolean isUpdated = Boolean.TRUE;
        obj.setIsUpdated(isUpdated);
    }
    
    public void MetricaBatchDataOnDemand.setPlanificacion(MetricaBatch obj, int index) {
        String planificacion = "planificacion_" + index;
        obj.setPlanificacion(planificacion);
    }
    
    public void MetricaBatchDataOnDemand.setQueryCode(MetricaBatch obj, int index) {
        String queryCode = "queryCode_" + index;
        obj.setQueryCode(queryCode);
    }
    
    public void MetricaBatchDataOnDemand.setSelectQuery(MetricaBatch obj, int index) {
        String selectQuery = "selectQuery_" + index;
        obj.setSelectQuery(selectQuery);
    }
    
    public void MetricaBatchDataOnDemand.setSourceId(MetricaBatch obj, int index) {
        String sourceId = "sourceId_" + index;
        obj.setSourceId(sourceId);
    }
    
    public void MetricaBatchDataOnDemand.setTypeQuery(MetricaBatch obj, int index) {
        String typeQuery = "typeQuery_" + index;
        obj.setTypeQuery(typeQuery);
    }
    
    public void MetricaBatchDataOnDemand.setUsuarioCreacion(MetricaBatch obj, int index) {
        String usuarioCreacion = "usuarioCreacion_" + index;
        obj.setUsuarioCreacion(usuarioCreacion);
    }
    
    public void MetricaBatchDataOnDemand.setUsuarioModificacion(MetricaBatch obj, int index) {
        String usuarioModificacion = "usuarioModificacion_" + index;
        obj.setUsuarioModificacion(usuarioModificacion);
    }
    
    public void MetricaBatchDataOnDemand.setWhereQuery(MetricaBatch obj, int index) {
        String WhereQuery = "WhereQuery_" + index;
        obj.setWhereQuery(WhereQuery);
    }
    
    public MetricaBatch MetricaBatchDataOnDemand.getSpecificMetricaBatch(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MetricaBatch obj = data.get(index);
        Long id = obj.getId();
        return metricaBatchService.findMetricaBatch(id);
    }
    
    public MetricaBatch MetricaBatchDataOnDemand.getRandomMetricaBatch() {
        init();
        MetricaBatch obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return metricaBatchService.findMetricaBatch(id);
    }
    
    public boolean MetricaBatchDataOnDemand.modifyMetricaBatch(MetricaBatch obj) {
        return false;
    }
    
    public void MetricaBatchDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = metricaBatchService.findMetricaBatchEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MetricaBatch' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MetricaBatch>();
        for (int i = 0; i < 10; i++) {
            MetricaBatch obj = getNewTransientMetricaBatch(i);
            try {
                metricaBatchService.saveMetricaBatch(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            metricaBatchRepository.flush();
            data.add(obj);
        }
    }
    
}
